{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      races: [],\n      horseFields: [{\n        key: \"programNumber\",\n        label: \"#\"\n      }, {\n        key: \"mlodds\",\n        \"label\": \"ML\",\n        sortable: true\n      }, \"name\", {\n        key: \"daysSinceLastRace\",\n        label: \"l/r\"\n      }, {\n        key: \"style\",\n        label: \"Style\"\n      }, {\n        key: \"arating\",\n        label: \"A\",\n        formatter: this.format2Places,\n        sortable: true\n      }, {\n        key: \"classRating\",\n        label: \"Class\",\n        formatter: this.format2Places,\n        sortable: true\n      }]\n    };\n  },\n  methods: {\n    async loadAndCalculate() {\n      try {\n        const response = await axios({\n          url: 'getAll',\n          method: 'GET',\n          baseURL: 'http://localhost:8080/jpp/rest/remote/'\n        });\n        this.races = response.data;\n      } catch (err) {\n        console.log(err.response);\n      }\n    },\n    format2Places(amount) {\n      const formatter = new Intl.NumberFormat('en-US', {\n        // These options are needed to round to whole numbers if that's what you want.\n        minimumFractionDigits: 2,\n        // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n        maximumFractionDigits: 2 // (causes 2500.99 to be printed as $2,501)\n      });\n\n      return formatter.format(amount);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;AAEA;EACAA;EACAC,aAEA;EACAC;IACA;MACAC;MACAC,cACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAA;QAAAE;MAAA,GACA,QACA;QAAAF;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;QAAAE;QAAAD;MAAA,GACA;QAAAF;QAAAC;QAAAE;QAAAD;MAAA;IAEA;EACA;EACAE;IACA;MACA;QACA;UACAC;UACAC;UACAC;QACA;QACA;MACA;QACAC;MAEA;IACA;IACAC;MACA;QAGA;QACAC;QAAA;QACAC;MACA;;MACA;IACA;EAAA;AACA","names":["name","components","data","races","horseFields","key","label","sortable","formatter","methods","url","method","baseURL","console","format2Places","minimumFractionDigits","maximumFractionDigits"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n\t<div id=\"app\">\n\n\t\t<b-navbar id=\"nav\" toggleable=\"sm\" class=\"py-2\" type=\"dark\" variant=\"primary\">\n\t\t\t\t\t\t\n\t\t\t<b-navbar-toggle target=\"nav-collapse\"></b-navbar-toggle>\n\t\t\t<b-collapse id=\"nav-collapse\" is-nav>\n\t\t\t\t<b-navbar-nav small>\n\t\t\t\t\t<b-nav-item class=\"h4\">JPP-UI</b-nav-item>\n\t\t\t\t</b-navbar-nav>\n\t\t\t</b-collapse>\n\t\t\t<!-- Right aligned nav items -->\n\t\t\t<b-navbar-nav>\n\t\t\t\t<b-nav-form>\n\t\t\t\t\t<b-form-input size=\"sm\" placeholder=\"Filename\"></b-form-input>\t\t\n\t\t\t\t</b-nav-form>\n\t\t\t</b-navbar-nav>\n\t\t\t<b-navbar-nav class=\"\" small>\n\t\t\t\t<b-nav-item @click=\"loadAndCalculate\">Load</b-nav-item>\n\t\t\t\t<b-nav-item>Calculate</b-nav-item>\n\t\t\t</b-navbar-nav>\n\t\t</b-navbar>\n\n\t\t<b-tabs>\n\t\t\t<b-tab v-for=\"race in races\" \n\t\t\t\t:key=\"race.raceNumber\" \n\t\t\t>\n\t\t\t\t<template #title>\n\t\t\t\t\tRace {{race.raceNumber}}&nbsp;\n\t\t\t\t</template>\n\n\t\t\t\t<b-container class=\"m-2\">\n\t\t\t\t\t<div class=\"card-body\">\n\t\t\t\t\t\t<h5 class=\"card-title\">\n\t\t\t\t\t\t\t<span>Race {{race.raceNumber}}</span>\n\t\t\t\t\t\t\t<small v-b-toggle=\"'collapse-'+race.race_id\"> - <u>show/hide details</u></small>\n\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t<b-collapse :id=\"'collapse-'+race.race_id\" visible>\n\t\t\t\t\t\t\t<span class=\"mt-2\">\n\t\t\t\t\t\t\t\t${{race.purse}}, {{race.raceType}}, {{race.surface}}, {{race.furlongs}} Furlongs,\n\t\t\t\t\t\t\t\t{{race.ageRestriction}}, {{race.ageRestrictionRange}}, {{race.sexRestriction}},\n\t\t\t\t\t\t\t\tWagers: {{race.wagerTypes}}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</b-collapse>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{{race.paceScenario}} - {{race.parPace2F}}:{{race.parPace4F}}:{{race.parPace6F}}/{{race.parLatePace}}-{{race.parSpeed}} \n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<b-table\n\t\t\t\t\t\t:items=\"race.horses\"\n\t\t\t\t\t\t:fields=\"horseFields\"\n\t\t\t\t\t\tsmall\n\t\t\t\t\t\tsort-icon-left\n\t\t\t\t\t>\n\t\t\t\t\t\t<template #cell(style)=\"data\">\n\t\t\t\t\t\t\t{{ data.item.runStyle }}{{ data.item.speedPoints }}\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</b-table>\n\n\t\t\t\t</b-container>\n\n\t\t\t</b-tab>\n\t\t</b-tabs>\n\n\t</div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n\tname: 'App',\n\tcomponents: {\n\n\t},\n\tdata () {\n\t\treturn {\n\t\t\traces: [],\n\t\t\thorseFields: [\n\t\t\t\t{key: \"programNumber\", label:\"#\"},\n\t\t\t\t{key: \"mlodds\", \"label\": \"ML\", sortable:true},\n\t\t\t\t\"name\",\n\t\t\t\t{key: \"daysSinceLastRace\", label:\"l/r\"},\n\t\t\t\t{key: \"style\", label: \"Style\" },\n\t\t\t\t{key: \"arating\", label: \"A\", formatter: this.format2Places, sortable: true},\n\t\t\t\t{key: \"classRating\", label:\"Class\", formatter: this.format2Places, sortable: true} \n\t\t\t]\n\t\t}\n\t},\n\tmethods: {\n\t\tasync loadAndCalculate() {\n            try {\n                const response = await axios({\n                    url: 'getAll',\n                    method: 'GET',\n                    baseURL: 'http://localhost:8080/jpp/rest/remote/'\n                });\n                this.races = response.data;\n            } catch (err) {\n                console.log(err.response);\n                \n            }\n\t\t},\n\t\tformat2Places(amount) {\n\t\t\tconst formatter = new Intl.NumberFormat('en-US', {\n\n\n\t\t\t\t// These options are needed to round to whole numbers if that's what you want.\n\t\t\t\tminimumFractionDigits: 2, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n\t\t\t\tmaximumFractionDigits: 2, // (causes 2500.99 to be printed as $2,501)\n\t\t\t});\n\t\t\treturn formatter.format(amount);\n\t\t}  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n#nav {\n  padding: 30px;\n}\n\n#filenameform {\n\twidth: 400px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}