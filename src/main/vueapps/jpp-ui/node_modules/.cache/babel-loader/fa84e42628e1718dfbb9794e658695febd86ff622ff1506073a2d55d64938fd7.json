{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'ChartView',\n  components: {},\n  props: ['race', 'starterFields'],\n  data() {\n    return {};\n  },\n  computed: {\n    claimed() {\n      var c = 0;\n      for (var i = 0; i < this.race.starters.length; i++) {\n        if (this.race.starters[i].claim && this.race.starters[i].claim.claimed) {\n          c++;\n        }\n      }\n      return c;\n    },\n    inForClaim() {\n      var c = 0;\n      for (var i = 0; i < this.race.starters.length; i++) {\n        if (this.race.starters[i].claim) {\n          c++;\n        }\n      }\n      return c;\n    }\n  },\n  methods: {\n    formatDate(date) {\n      return date[1] + \"/\" + date[2] + \"/\" + date[0];\n    },\n    formatCurrency(amount) {\n      const formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        // These options are needed to round to whole numbers if that's what you want.\n        minimumFractionDigits: 0,\n        // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n        maximumFractionDigits: 0 // (causes 2500.99 to be printed as $2,501)\n      });\n\n      return formatter.format(amount);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;EACAA;EACAC,aAEA;EACAC;EACAC;IACA,QAEA;EACA;EACAC;IACAC;MACA;MACA;QACA;UACAC;QACA;MACA;MACA;IACA;IACAC;MACA;MACA;QACA;UACAD;QACA;MACA;MACA;IACA;EACA;EACAE;IACAC;MACA;IACA;IACAC;MACA;QACAC;QACAC;QAEA;QACAC;QAAA;QACAC;MACA;;MACA;IACA;EACA;AACA","names":["name","components","props","data","computed","claimed","c","inForClaim","methods","formatDate","formatCurrency","style","currency","minimumFractionDigits","maximumFractionDigits"],"sourceRoot":"src/components","sources":["ChartView.vue"],"sourcesContent":["/* eslint-disable vue/valid-v-slot */\n<template>\n    <div class=\"card-body mt-2\">\n        <strong>{{race.track.name}} {{formatDate(race.raceDate)}} Race {{race.raceNumber}}</strong><br>\n        {{race.conditions.type}}<br>\n        {{race.conditions.text}}<br>\n        {{race.distance.text}} on the {{race.surface}}<br>\n        <strong>Purse:</strong> {{race.purse.text}}<br>\n        <span v-for=\"(enhancement, eindex) in race.purse.enhancements\" :key=\"eindex\"><strong>{{enhancement.type}}:</strong> {{enhancement.text}}</span><br>\n        <strong>Available Money:</strong> {{race.purse.availableMoney}}<br>\n        <strong>Weather:</strong> {{race.weather.text}} <strong>Track:</strong> {{race.trackCondition}}<br>\n        <strong>Off at:</strong> {{race.postTime}} <strong>Start:</strong> {{race.startComments}} <strong>Timer:</strong> {{race.timer}}\n        <b-table\n            id=\"runningLines\"\n            :items=\"race.starters\"\n            :fields=\"starterFields\"\n            small\n            primary-key=\"program\"\n            class=\"mt-2\"\n        >\n            <template #cell(lastRaced)=\"row\">\n                <span v-if=\"row.item.lastRaced\">{{formatDate(row.item.lastRaced.raceDate)}}<sup>{{row.item.lastRaced.raceNumber}}</sup> {{row.item.lastRaced.track.code}}<sup>{{row.item.lastRaced.officialPosition}}</sup></span>\n            </template>\n            <template #cell(horsename)=\"row\">\n                {{row.item.horse.name}} ({{row.item.jockey.name}})\n            </template> \n            <template #cell(pointsOfCall0)=\"row\">\n                {{row.item.pointsOfCall[0].relativePosition.position}}<sup v-if=\"row.item.pointsOfCall[0].relativePosition.lengthsAhead\">{{row.item.pointsOfCall[0].relativePosition.lengthsAhead.text}}</sup>\n            </template> \n            <template #cell(pointsOfCall1)=\"row\">\n                {{row.item.pointsOfCall[1].relativePosition.position}}<sup v-if=\"row.item.pointsOfCall[1].relativePosition.lengthsAhead\">{{row.item.pointsOfCall[1].relativePosition.lengthsAhead.text}}</sup>\n            </template> \n            <template #cell(pointsOfCall2)=\"row\">\n                {{row.item.pointsOfCall[2].relativePosition.position}}<sup v-if=\"row.item.pointsOfCall[2].relativePosition.lengthsAhead\">{{row.item.pointsOfCall[2].relativePosition.lengthsAhead.text}}</sup>\n            </template> \n            <template #cell(pointsOfCall3)=\"row\">\n                {{row.item.pointsOfCall[3].relativePosition.position}}<sup v-if=\"row.item.pointsOfCall[3].relativePosition.lengthsAhead\">{{row.item.pointsOfCall[3].relativePosition.lengthsAhead.text}}</sup>\n            </template> \n            <template #cell(pointsOfCall4)=\"row\">\n                {{row.item.pointsOfCall[4].relativePosition.position}}<sup v-if=\"row.item.pointsOfCall[4].relativePosition.lengthsAhead\">{{row.item.pointsOfCall[4].relativePosition.lengthsAhead.text}}</sup>\n            </template> \n            <template #cell(pointsOfCall5)=\"row\">\n                {{row.item.pointsOfCall[5].relativePosition.position}}<sup v-if=\"row.item.pointsOfCall[5].relativePosition.lengthsAhead\">{{row.item.pointsOfCall[5].relativePosition.lengthsAhead.text}}</sup>\n            </template>                                                 \n\t\t</b-table>     \n\t\t<strong>Fractional Times: </strong>&nbsp;&nbsp;<span v-for=\"(fractional, findex) in race.fractionals\" :key=\"'f' + findex\">{{fractional.time}}&nbsp;&nbsp;&nbsp;</span><br>\n\t\t<strong>Split Times: </strong>&nbsp;&nbsp;<span v-for=\"(split, sindex) in race.splits\" :key=\"'s' + sindex\">({{split.time}})&nbsp;&nbsp;&nbsp;</span><br><br>\n\t\t<strong>Winner: </strong>{{race.starters[0].horse.program}} - {{race.starters[0].horse.name}}, {{race.starters[0].horse.color}} {{race.starters[0].horse.sex}}, by {{race.starters[0].horse.sire.name}} out of {{race.starters[0].horse.dam.name}} by {{race.starters[0].horse.damSire.name}}. Foaled {{formatDate(race.starters[0].horse.foalingDate)}} in {{race.starters[0].horse.foalingLocation}}<br>\n\t\t<strong>Winning Owner: </strong>{{race.starters[0].owner.name}}<br>\n\t\t<span v-for=\"(starter, stindex) in race.starters\" :key=\"starter.program\">\n\t\t\t<b-row v-if=\"starter.claim && starter.claim.claimed\">\n\t\t\t\t<b-col>\n\t\t\t\t\t<span v-if=\"stindex == 0\"><strong>{{claimed}} Claimed Horse(s): </strong></span>\n\t\t\t\t</b-col>\n\t\t\t\t<b-col>\n\t\t\t\t\t<strong>{{starter.horse.name}}</strong>\n\t\t\t\t</b-col>\n\t\t\t\t<b-col>\n\t\t\t\t\t{{starter.claim.newTrainerName}}\n\t\t\t\t</b-col>\n\t\t\t\t<b-col cols=\"6\">\n\t\t\t\t\t{{starter.claim.newOwnerName}}\n\t\t\t\t</b-col>                      \n\t\t\t</b-row>\n\t\t</span>\n\t\t<span v-if=\"inForClaim > 0\">\n\t\t\t<strong>Claiming Prices: </strong>\t\n\t\t\t<span v-for=\"starter in race.starters\" :key=\"'c' + starter.program\">\n\t\t\t\t<span v-if=\"starter.claim\">{{starter.program}}  - {{starter.horse.name}}: {{formatCurrency(starter.claim.price)}};&nbsp;</span>\n\t\t\t</span> \n\t\t\t<br><br>\n\t\t</span>\n\t\t<span v-if=\"race.scratches.length > 0\"><strong>Scratched Horses: </strong><span v-for=\"(scratch, scrindex) in race.scratches\" :key=\"scratch.horse.name\">{{scratch.horse.name}} ({{scratch.reason}})<span v-if=\"scrindex < race.scratches.length - 1\">,</span>;&nbsp;</span></span><br>\n\t\t<strong>Trainers: </strong><span v-for=\"(starter,trindex) in race.starters\" :key=\"'tr' + starter.program\">{{starter.program}} - {{starter.trainer.name}}<span v-if=\"trindex < race.scratches.length - 1\"></span>;&nbsp;</span><br>\n\t\t<strong>Owners: </strong><span v-for=\"(starter,owindex) in race.starters\" :key=\"'ow' + starter.program\">{{starter.program}} - {{starter.owner.name}}<span v-if=\"owindex < race.scratches.length - 1\"></span>;&nbsp;</span><br>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'ChartView',\n    components: {\n\t\n    },\n    props : ['race', 'starterFields'],\n    data () {\n\t\treturn {\n\n        }\n    },\n    computed: {\n        claimed() {\n\t\t\tvar c = 0;\n            for (var i = 0; i < this.race.starters.length; i++) {\n                if (this.race.starters[i].claim && this.race.starters[i].claim.claimed) {\n\t\t\t\t\tc++;\n                }\n            }\n            return c;\n        },\n        inForClaim() {\n\t\t\tvar c = 0;\n            for (var i = 0; i < this.race.starters.length; i++) {\n                if (this.race.starters[i].claim) {\n\t\t\t\t\tc++;\n                }\n            }\n            return c;\n        },\t\t\n    },\n    methods: {\n\t\tformatDate (date) {\n\t\t\treturn date[1] + \"/\" + date[2] + \"/\" + date[0];\n\t\t},\t\n\t\tformatCurrency(amount) {\n\t\t\tconst formatter = new Intl.NumberFormat('en-US', {\n\t\t\t\tstyle: 'currency',\n\t\t\t\tcurrency: 'USD',\n\n\t\t\t\t// These options are needed to round to whole numbers if that's what you want.\n\t\t\t\tminimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n\t\t\t\tmaximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n\t\t\t});\n\t\t\treturn formatter.format(amount);\n\t\t}\t\t\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}